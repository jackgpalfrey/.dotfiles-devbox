#!/bin/bash

###############################################################################
################################# Color Codes #################################
###############################################################################
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

###############################################################################
################################# Emoji Codes #################################
###############################################################################
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="\xE2\x88\x9F${NC}"

###############################################################################
################################ Prescript Init ###############################
###############################################################################
export LANG=C.UTF-8
set -e

###############################################################################
#################################### Paths ####################################
###############################################################################
VAULT_SECRET_FILE="$HOME/.ansible-vault/vault.secret"
OP_INSTALLED=false
OP_AUTHENTICATED=false
OP_VAULT_SECRET=""
ID=""
DOTFILES_INFO_DIR="$HOME/.dotfiles-info"
DOTFILES_LOG="$HOME/.dotfiles-info/dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles-devbox"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles-info/dotfiles_run"


###############################################################################
################################ Initial Setup ################################
###############################################################################
mkdir -p $DOTFILES_INFO_DIR

###############################################################################
############################### Helper Functions ##############################
###############################################################################
# _header colorize the given argument with spacing
function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  # set new task title and print
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}


# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  > $DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

# Clears the entire current line regardless of terminal size.
# See the magic by running:
# { sleep 1; clear_this_line ; }&
clear_line(){
        printf '\r'
        cols="$(tput cols)"
        for i in $(seq "$cols"); do
                printf ' '
        done
        printf '\r'
}

# Erases the amount of lines specified.
# Usage: erase_lines [AMOUNT]
# See the magic by running:
# { sleep 1; erase_lines 2; }&
erase_lines(){
        # Default line count to 1.
        test -z "$1" && lines="1" || lines="$1"

        # This is what we use to move the cursor to previous lines.
        UP='\033[1A'

        # Exit if erase count is zero.
        [ "$lines" = 0 ] && return

        # Erase.
        if [ "$lines" = 1 ]; then
                clear_line
        else
                lines=$((lines-1))
                clear_line
                for i in $(seq "$lines"); do
                        printf "$UP"
                        clear_line
                done
        fi
}

###############################################################################
############################## OS Specific Setup ##############################
###############################################################################
function ubuntu_setup() {
  if ! dpkg -s ansible >/dev/null 2>&1; then
    __task "Installing Ansible"
    echo -n -e "${BLUE}"
    echo -n -e " [              ] - Updating packages                         \r"
    _cmd "sudo apt-get update"
    echo -n -e " [##            ] - Installing software-properties-common     \r"
    _cmd "sudo apt-get install -y software-properties-common"
    echo -n -e " [####          ] - Adding ansible ppa                        \r"
    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
    echo -n -e " [######        ] - Updating packages                         \r"
    _cmd "sudo apt-get update"
    echo -n -e " [########      ] - Installing ansible package                \r"
    _cmd "sudo apt-get install -y ansible"
    echo -n -e " [##########    ] - Installing python3-argcomplete            \r"
    _cmd "sudo apt-get install python3-argcomplete"
    echo -n -e " [############  ] - Activating python3-argcomplete            \r"
    # _cmd "sudo activate-global-python-argcomplete3"
    echo -n -e " [##############]                                             \r"
  else    
    __task "Ansible already installed"
  fi

  if ! dpkg -s python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi

  local UBUNTU_MAJOR_VERSION=$(echo $VERSION_ID | cut -d. -f1)
  if [ $UBUNTU_MAJOR_VERSION -le 22 ]; then
    if ! dpkg -s python3-pip >/dev/null 2>&1; then
      __task "Installing Python3 Pip"
      _cmd "sudo apt-get install -y python3-pip"
    fi
    if ! pip3 list | grep watchdog >/dev/null 2>&1; then
      __task "Installing Python3 Watchdog"
      _cmd "sudo apt-get install -y python3-watchdog"
    fi
  fi
}

function arch_setup() {
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "sudo pacman -Sy --noconfirm"
    _cmd "sudo pacman -S --noconfirm ansible"
    _cmd "sudo pacman -S --noconfirm python-argcomplete"
    # _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! pacman -Q python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm python3"
  fi
  if ! pacman -Q python-pip >/dev/null 2>&1; then
    __task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm python-pip"
  fi
  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    __task "Installing Python3 Watchdog"
    _cmd "sudo pacman -S --noconfirm python-watchdog"
  fi

  if ! pacman -Q openssh >/dev/null 2>&1; then
    __task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm openssh"
  fi

  __task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

function macos_setup() {
  if ! [ -x "$(command -v brew)" ]; then
    __task "Installing Homebrew"
    _cmd "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  fi
  if ! [ -x "$(command -v git)" ]; then
    __task "Installing Git"
    _cmd "brew install git"
  fi
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "brew install ansible"
  fi
  if ! [ -x "$(command -v op)" ]; then
    __task "Installing 1Password CLI"
    _cmd "brew install 1password@beta"
    _cmd "brew install 1password-cli@beta"
    __task "Setting up 1Password CLI"
    # press any key to continue
    read -n 1 -s -r -p "Press any key to continue"
    echo -e "${OVERWRITE}${OVERWRITE} [✓]  ${GREEN}1Password CLI setup complete${NC}" && _clear_task
  fi
}

###############################################################################
################################ Step Functions ###############################
###############################################################################
update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  __task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    __task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

detect_os() {
  if [ -f /etc/os-release ]; then
    source /etc/os-release
    echo $ID
  else
    echo $(uname -s | tr '[:upper:]' '[:lower:]')
  fi
}


function role_select_menu(){
    # initialize an array with our explicit arguments

    export NEWT_COLORS='
    window=white,gray
    border=lightgray,gray
    shadow=white,black
    button=black,green
    actbutton=black,red
    compactbutton=lightgray,black
    title=yellow,gray
    roottext=red,black
    textbox=lightgray,gray
    acttextbox=gray,white
    entry=black,lightgray
    disentry=gray,black
    checkbox=black,lightgray
    actcheckbox=black,green
    emptyscale=,lightgray
    fullscale=,brown
    listbox=black,lightgray
    actlistbox=lightgray,black
    actsellistbox=black,green
    '


    whiptail_entries=()
    count=0
    mapfile -t role_lines < "$DOTFILES_DIR/all_roles"
    for role_line in "${role_lines[@]}"; do
        ((count++))
        role=()

        OLD_IFS=$IFS
        IFS=";"
        IFS=";" read -a role <<< $role_line
        # IFS=$OLD_IFS
        role_name=${role[0]}
        role_desc=${role[1]}
        
        if [ -f $DOTFILES_INFO_DIR/installed_roles ]; then
            if grep -q $role_name "$DOTFILES_INFO_DIR/installed_roles"; then
                role_state="ON"
            else
                role_state="OFF"
            fi
        else
            role_state=${role[2]}
        fi

        whiptail_entries+=( "$role_name" "$role_desc" ${role_state})
    done

    whiptail_args=(
        --separate-output
      --title "Install Roles"
      --checklist "Select roles you'd like to install or update"
      20 80 
      "${count}"  # note the use of ${#arrayname[@]} to get count of entries
    )

    whiptail_args+=( "${whiptail_entries[@]}" )
    
    whiptail_out=$(whiptail "${whiptail_args[@]}" 3>&1 1>&2 2>&3); whiptail_retval=$?

    if [[ $whiptail_retval == 1 ]]; then
        printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n" > /dev/tty
        echo "      Install Cancelled" > /dev/tty
        exit 1
    else
        echo $whiptail_out
    fi
}

###############################################################################
############################## Main Process ##############################
###############################################################################
# Get sudo password
_cmd "sudo echo -n"

# Perform OS specific setup
dotfiles_os=$(detect_os)
__task "Loading Setup for detected OS: $dotfiles_os"
case $dotfiles_os in
  ubuntu)
    ubuntu_setup
    ;;
  arch)
    arch_setup
    ;;
  darwin)
    macos_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

erase_lines 2

# Clone or update remote repo
if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/jackgpalfrey/.dotfiles-devbox.git $DOTFILES_DIR"
  # _cmd "git clone --quiet git@github.com:jackgpalfrey/.dotfiles-devbox.git $DOTFILES_DIR"
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi
pushd "$DOTFILES_DIR" 2>&1 > /dev/null

update_ansible_galaxy $ID
erase_lines 1

# Determine roles
__task "Installing or updating the following roles"
roles=$(role_select_menu)

if [ -f $DOTFILES_INFO_DIR/installed_roles ]; then
    echo -e "${BOOK} ${BLUE}Loaded preset${NC}"
else
    touch $DOTFILES_INFO_DIR/installed_roles
fi

echo $roles | tr " " "\n"> "$DOTFILES_INFO_DIR/installed_roles"

IFS="\n" mapfile -t lines < "$DOTFILES_INFO_DIR/installed_roles"
for line in "${lines[@]}"; do
    printf "${RIGHT_ANGLE} ${LBLUE}${line}\n"
done

echo ""
echo -e -n "${SEA}${ARROW} "
continue_input=$(read -n 1 -r -p "Would you like to continue [Y/n]: " && tr '[:upper:]' '[:lower:]' <<< "${REPLY}")
continue_input=${continue_input:-y}
echo ""

if [ ${continue_input} != "y" ]; then
    echo "Cancelled"
    exit
fi



# Execute playbook
rm -f $VAULT_SECRET_FILE
ansible-playbook "$DOTFILES_DIR/main.yml" --ask-become-pass --ask-vault-pass "$@"

popd 2>&1 > /dev/null

# Finish up output
if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  echo -e "${ARROW} ${CYAN}Then follow the instructions in ~/dotfiles-steps.md${NC}"
  
  touch "$IS_FIRST_RUN"
fi

# vi:ft=sh:
